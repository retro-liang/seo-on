<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
              http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5" xmlns="http://java.sun.com/xml/ns/javaee">

	<display-name>SEO-on</display-name>

	<description>SEO-on application</description>
	
	<servlet>
        <servlet-name>seoon</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>seoon</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

	<!-- Key of the system property that should specify the root directory of 
		this web app. Applied by WebAppRootListener or Log4jConfigListener. -->
	
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>seoon.root</param-value>
	</context-param>

	<!-- Location of the Log4J config file, for initialization and refresh checks. Applied by Log4jConfigListener. -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.xml</param-value>
	</context-param>
	

	<!--
    - Location of the XML file that defines the root application context.
    - Applied by ContextLoaderServlet.
    -
    - Can be set to:
    - "/WEB-INF/applicationContext-hibernate.xml" for the Hibernate implementation,
    - "/WEB-INF/applicationContext-jpa.xml" for the JPA one, or
    - "/WEB-INF/applicationContext-jdbc.xml" for the JDBC one.
  -->
  <!-- 
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/spring/applicationContext.xml</param-value>
    -->
    
    <!--
    <param-value>/WEB-INF/spring/applicationContext-hibernate.xml</param-value>
    <param-value>/WEB-INF/spring/applicationContext-jpa.xml</param-value>
    -->

    <!--
      To use the JPA variant above, you will need to enable Spring load-time
      weaving in your server environment. Out of the box, Spring will try to
      detect the running environment and use the appropriate weaver but if that
      fails, one must enable one by hand or use the VM-wide weaver.
      See PetClinic's readme and/or Spring's JPA documentation for more information.
    -->
    <!-- 
  </context-param>
	-->
  <!--
    - Configures Log4J for this web app.
    - As this context specifies a context-param "log4jConfigLocation", its file path
    - is used to load the Log4J configuration, including periodic refresh checks.
    -
    - Would fall back to default Log4J initialization (non-refreshing) if no special
    - context-params are given.
    -
    - Exports a "web app root key", i.e. a system property that specifies the root
    - directory of this web app, for usage in log file paths.
    - This web app specifies "seoon.root" (see log4j.properties file).
  -->
  <!-- Leave the listener commented-out if using JBoss -->
  
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>

  <!-- 
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
   -->
  
  <!--  
  <servlet>
    <servlet-name>default</servlet-name>
    <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>
    <init-param>
      <param-name>debug</param-name>
      <param-value>0</param-value>
    </init-param>
    <init-param>
      <param-name>listings</param-name>
      <param-value>false</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  -->
  
  <!-- 
  <servlet-mapping>
    <servlet-name>_ah_default</servlet-name>
    <url-pattern>/static/*</url-pattern>
  </servlet-mapping>

  
  <servlet>
    <servlet-name>seoon</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <load-on-startup>2</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>seoon</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <filter>
    <filter-name>httpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>

  <filter-mapping>
    <filter-name>httpMethodFilter</filter-name>
    <servlet-name>seoon</servlet-name>
  </filter-mapping>
  
  <session-config>
    <session-timeout>10</session-timeout>
  </session-config>

  <error-page>
    <exception-type>java.lang.Exception</exception-type>
    <location>/WEB-INF/jsp/uncaughtException.jsp</location>
  </error-page>
	-->
  <!--
  <welcome-file-list>
    <welcome-file></welcome-file>
  </welcome-file-list>
  -->

  <!--
  <resource-ref>
    <res-ref-name>jdbc/petclinic</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>
  -->

</web-app>